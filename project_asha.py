# -*- coding: utf-8 -*-
"""Project asha.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/astha77-bot/Project-asha/blob/master/Project_asha.ipynb
"""

import nltk

from nltk.stem.lancaster import LancasterStemmer
stemmer = LancasterStemmer()

!pip install tflearn

!pip uninstall tensorflow -y
!pip uninstall tensorflow-gpu -y
!pip uninstall tflearn -y
!pip install tensorflow-gpu==1.15
!pip install tflearn

import tflearn

import numpy
import tflearn
import tensorflow
import random

from google.colab import files
uploaded = files.upload()

file_name = "ashap.json"
uploaded[file_name].decode("utf-8")

import json

import codecs

data=json.load(codecs.open('ashap.json', 'r', 'utf-8-sig'))

data

words = []
labels =[]
docs_x = []
docs_y = []

import nltk
nltk.download('punkt')

for intent in data["intents"]:
    for pattern in intent["patterns"]:
      #stemming
        wrds = nltk.word_tokenize(pattern)
        #addind the words in list
        words.extend(wrds)
        docs_x.append(wrds)
        docs_y.append(intent["tag"])

    if intent["tag"] not in labels:
        labels.append(intent["tag"])

words = [stemmer.stem(w.lower()) for w in words if w != "?"]
#set remove all the duplicate elements
words = sorted(list(set(words)))

labels = sorted(labels)

training = []
output = []

out_empty = [0 for _ in range(len(labels))]

for x, doc in enumerate(docs_x):
    bag = []

    wrds = [stemmer.stem(w.lower()) for w in doc]

    for w in words:
        if w in wrds:
            bag.append(1)
        else:
            bag.append(0)

output_row = out_empty[:]
    output_row[labels.index(docs_y[x])] = 1

    training.append(bag)
    output.append(output_row)

training = numpy.array(training)
output = numpy.array(output)

#reseting all the previous settings
tensorflow.reset_default_graph()

net = tflearn.input_data(shape=[None, len(training[0])])

net = tflearn.fully_connected(net, 8)

net = tflearn.fully_connected(net, 8)

net = tflearn.fully_connected(net, len(output[0]), activation="softmax")

net = tflearn.regression(net)

model = tflearn.DNN(net)

model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
model.save("model.tflearn")

try:
    model.load("model.tflearn")
except:
    model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
    model.save("model.tflearn")

def bag_of_words(s, words):
    bag = [0 for _ in range(len(words))]

    s_words = nltk.word_tokenize(s)
    s_words = [stemmer.stem(word.lower()) for word in s_words]
    
    for se in s_words:
        for i, w in enumerate(words):
            if w == se:
                bag[i] = 1
            
    return numpy.array(bag)

def chat():
    print("Start talking with the bot (type quit to stop)!")
    while True:
        inp = input("You: ")
        if inp.lower() == "quit":
            break

        results = model.predict([bag_of_words(inp, words)])
        results_index = numpy.argmax(results)
        tag = labels[results_index]

        for tg in data["intents"]:
            if tg['tag'] == tag:
                responses = tg['responses']

        print(random.choice(responses))